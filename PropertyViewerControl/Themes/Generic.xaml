<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:pvc="clr-namespace:PropertyViewerControl"
    xmlns:cells="clr-namespace:PropertyViewerControl.Cells"
    xmlns:converters="clr-namespace:PropertyViewerControl.Converters"
    xmlns:rows="clr-namespace:PropertyViewerControl.Rows">

    <converters:LevelToMarginConverter x:Key="LevelToMarginConverter" />

    <!-- ChildrenToggleButton -->
    <Style x:Key="ChildrenToggleButton" TargetType="ToggleButton">
        <Setter Property="Height" Value="16" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">

                    <Border Width="{TemplateBinding Width}" 
                            Height="{TemplateBinding Height}"
                            Padding="{TemplateBinding Padding}">

                        <Border.RenderTransform>
                            <RotateTransform Angle="0" />
                        </Border.RenderTransform>

                        <Viewbox Stretch="Uniform">
                            <Border Width="14" Height="18" VerticalAlignment="Center" HorizontalAlignment="Center" >
                                <TextBlock x:Name="Icon" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" Text="🞂" FontSize="22" VerticalAlignment="Center" Margin="2,-2,0,0" RenderTransformOrigin=".5,.5"/>
                            </Border>
                        </Viewbox>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="Icon">
                                <Setter.Value>
                                    <RotateTransform Angle="45"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NameValueGridSplitter" TargetType="GridSplitter">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="1,0" />
        <Setter Property="Background" Value="DarkGray" />
        <Setter Property="ResizeDirection" Value="Columns" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border Background="Transparent" Padding="1,0" >
                        <Rectangle Width="1" Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PropertyViewer -->
    <Style TargetType="pvc:PropertyViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="pvc:PropertyViewer">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}">
                        <StackPanel>

                            <!-- The Header Row -->
                            <ContentControl Content="{TemplateBinding HeaderRow}"/>

                            <!-- The Rows Container -->
                            <ItemsControl ItemsSource="{TemplateBinding Rows}" />

                        </StackPanel>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- HeaderRow -->
    <Style TargetType="rows:HeaderRow">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="rows:HeaderRow">
                    <!-- Grid for the header -->
                    <Grid>
                        <Grid.Background>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <GradientStop Color="White" Offset="0"></GradientStop>
                                <GradientStop Color="#E1E1E1" Offset="1"></GradientStop>
                            </LinearGradientBrush>
                        </Grid.Background>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyViewer.NameColumn.Width, FallbackValue=Auto, Mode=TwoWay}" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyViewer.ValueColumn.Width, FallbackValue=*, Mode=TwoWay}" />
                        </Grid.ColumnDefinitions>

                        <!-- Cell for the Header Property Name -->
                        <ContentControl Content="{TemplateBinding NameHeaderCell}" Grid.Column="0" />

                        <!-- Grid Splitter -->
                        <GridSplitter x:Name="PART_GridSplitter" Grid.Column="1" Style="{StaticResource NameValueGridSplitter}" />

                        <!-- Cell for the Header Property Value -->
                        <ContentControl Content="{TemplateBinding ValueHeaderCell}" Grid.Column="2" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CellBase -->
    <Style TargetType="cells:CellBase">

    </Style>

    <!-- HeaderCellBase -->
    <Style TargetType="cells:HeaderCellBase" BasedOn="{StaticResource {x:Type cells:CellBase}}">
        <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyViewer.NameColumn.Header, FallbackValue=Name}" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="cells:CellBase">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">

                        <ContentPresenter />

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NameHeaderCell -->
    <Style TargetType="cells:NameHeaderCell" BasedOn="{StaticResource {x:Type cells:HeaderCellBase}}">
    </Style>

    <!-- ValueHeaderCell -->
    <Style TargetType="cells:ValueHeaderCell" BasedOn="{StaticResource {x:Type cells:HeaderCellBase}}">
    </Style>

    <!-- Row -->
    <Style TargetType="rows:Row">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="rows:Row">

                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyViewer.NameColumn.Width, FallbackValue=Auto, Mode=TwoWay}" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyViewer.ValueColumn.Width, FallbackValue=*, Mode=TwoWay}" />
                            </Grid.ColumnDefinitions>

                            <ContentControl Content="{TemplateBinding NameCell}" Grid.Column="0"/>

                            <!-- Grid Splitter -->
                            <GridSplitter x:Name="PART_GridSplitter" Grid.Column="1" Style="{StaticResource NameValueGridSplitter}" />

                            <ContentControl Content="{TemplateBinding ValueCell}" Grid.Column="2"/>
                        </Grid>

                        <!-- The rows container -->
                        <ContentControl x:Name="PART_ChildRowsContainer">
                            <ItemsControl ItemsSource="{TemplateBinding Children}" />
                        </ContentControl>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="PART_ChildRowsContainer" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NameCell -->
    <Style TargetType="cells:NameCell" BasedOn="{StaticResource {x:Type cells:CellBase}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="cells:NameCell">
                    <StackPanel Orientation="Horizontal" 
                                Margin="{Binding RelativeSource={RelativeSource AncestorType=rows:Row}, Path=Level, Converter={StaticResource LevelToMarginConverter}}">

                        <ToggleButton x:Name="ToggleButton" 
                                      Style="{StaticResource ChildrenToggleButton}"
                                      IsChecked="{Binding RelativeSource={RelativeSource AncestorType=rows:Row}, Path=IsExpanded}" VerticalAlignment="Center" />

                        <ContentPresenter  VerticalAlignment="Center"/>

                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=rows:Row}, Path=HasChildren}" Value="False">
                            <Setter TargetName="ToggleButton" Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ValueCell -->
    <Style TargetType="cells:ValueCell" BasedOn="{StaticResource {x:Type cells:CellBase}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="cells:ValueCell">

                    <ContentPresenter VerticalAlignment="Center"/>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
